{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-try-ghost/src/templates/author.js"],"names":["pageQuery","Author","data","location","posts","allGhostPost","edges","author","ghostAuthor","type","header","numberOfPosts","length","className","map","i","node","key","id","post","num","isAuthor"],"mappings":"6FAAA,kGA0CaA,EAAS,aAoBPC,UAjDA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACdC,EAAQF,EAAKG,aAAaC,MAC1BC,EAASL,EAAKM,YAEpB,OACI,oCACI,kBAAC,IAAD,CAAUL,SAAUA,EAAUD,KAAMA,EAAMO,KAAK,YAC/C,kBAAC,IAAD,CAAQF,OAAQA,EAAQG,OAAQ,kBAAC,IAAD,CAAcH,OAAQA,EAAQI,cAAeP,EAAMQ,UAC/E,yBAAKC,UAAU,eACX,yBAAKA,UAAU,aACVT,EAAMU,KAAI,WAAYC,GAAZ,IAAGC,EAAH,EAAGA,KAAH,OAEP,kBAAC,IAAD,CAAUC,IAAKD,EAAKE,GAAIC,KAAMH,EAAMI,IAAKL,EAAGM,UAAU","file":"component---node-modules-gatsby-theme-try-ghost-src-templates-author-js-6267fe927dd8ac61471d.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { Layout, PostCard, HeaderAuthor } from '../components/common'\nimport { MetaData } from '../components/common/meta'\n\n/**\n* Author page (/author/:slug)\n*\n* Loads all posts for the requested author incl. pagination.\n*\n*/\nconst Author = ({ data, location }) => {\n    const posts = data.allGhostPost.edges\n    const author = data.ghostAuthor\n\n    return (\n        <>\n            <MetaData location={location} data={data} type=\"profile\"/>\n            <Layout author={author} header={<HeaderAuthor author={author} numberOfPosts={posts.length}/>}>\n                <div className=\"inner posts\">\n                    <div className=\"post-feed\">\n                        {posts.map(({ node } , i) => (\n                            // The tag below includes the markup for each post - components/common/PostCard.js\n                            <PostCard key={node.id} post={node} num={i} isAuthor={true}/>\n                        ))}\n                    </div>\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nAuthor.propTypes = {\n    data: PropTypes.shape({\n        ghostAuthor: PropTypes.object.isRequired,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n}\n\nexport const pageQuery = graphql`\n    query GhostAuthorQuery($slug: String!, $limit: Int!, $skip: Int!) {\n        ghostAuthor(slug: { eq: $slug }) {\n            ...GhostAuthorFields\n        }\n        allGhostPost(\n            sort: { order: DESC, fields: [published_at] },\n            filter: {authors: {elemMatch: {slug: {eq: $slug}}}},\n            limit: $limit,\n            skip: $skip\n        ) {\n            edges {\n                node {\n                ...GhostPostFields\n                }\n            }\n        }\n    }\n`\n\nexport default Author\n"],"sourceRoot":""}
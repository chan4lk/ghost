{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-try-ghost/src/templates/post.js"],"names":["Post","data","location","pageContext","post","prevPost","prev","nextPost","next","previewPosts","allGhostPost","edges","readingTime","readingTimeHelper","featImg","feature_image","fluidFeatureImg","featureImageSharp","childImageSharp","fluid","postClass","PostClass","tags","isFeatured","isImage","primaryTagCount","transformedHtml","children","html","type","codeinjection_styles","isPost","activeClass","render","sticky","header","title","posts","className","primary_tag","to","slug","name","ref","anchorRef","custom_excerpt","authors","map","author","i","key","dateTime","published_at","published_at_pretty","fluidClass","fluidImg","srcImg","dangerouslySetInnerHTML","__html","postQuery"],"mappings":"8QA+HeA,UA7GF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACtBC,EAAOH,EAAKG,KACZC,EAAWJ,EAAKK,KAChBC,EAAWN,EAAKO,KAChBC,EAAeR,EAAKS,aAAaC,MACjCC,EAAcC,YAAkBT,GAChCU,EAAUV,EAAKW,cACfC,EAAkBZ,EAAKa,mBAAqBb,EAAKa,kBAAkBC,iBAAmBd,EAAKa,kBAAkBC,gBAAgBC,MAC7HC,EAAYC,YAAU,CAAEC,KAAMlB,EAAKkB,KAAMC,WAAYT,EAASU,QAASV,IAAW,IAElFW,EAAkBtB,EAAYsB,gBAC9BC,EAAkBtB,EAAKuB,SAAS,IAAMvB,EAAKuB,SAAS,GAAGC,KAE7D,OACI,oCACI,kBAAC,IAAD,CAAU3B,KAAMA,EAAMC,SAAUA,EAAU2B,KAAK,YAC/C,kBAAC,IAAD,KACI,2BAAOA,KAAK,YAAZ,GAA2BzB,EAAK0B,uBAEpC,kBAAC,IAAD,CAAoBC,QAAQ,EAAMC,YAAY,wBAAwBC,OAAS,SAAAC,GAAM,OACjF,kBAAC,IAAD,CAAQH,QAAQ,EAAMG,OAAQA,EAC1BC,OAAQ,kBAAC,IAAD,CAAYD,OAAQA,EAAQE,MAAOhC,EAAKgC,QAChD3B,aAAc,kBAAC,IAAD,CAAc4B,MAAO5B,EAAcgB,gBAAiBA,EAAiBnB,KAAMD,EAAUG,KAAMD,KACzG,yBAAK+B,UAAU,SACX,6BAASA,UAAS,aAAelB,GAC7B,4BAAQkB,UAAU,oBACZlC,EAAKmC,aACH,6BAASD,UAAU,kBACf,kBAAC,OAAD,CAAME,GAAE,QAAUpC,EAAKmC,YAAYE,KAA3B,KAAqCrC,EAAKmC,YAAYG,OAItE,wBAAIC,IAAKT,GAAUA,EAAOU,UAAWN,UAAU,mBAAmBlC,EAAKgC,OAErEhC,EAAKyC,gBACH,uBAAGP,UAAU,4BAA4BlC,EAAKyC,gBAGlD,yBAAKP,UAAU,oBACX,6BAASA,UAAU,4BACf,kBAAC,IAAD,CAAYQ,QAAS1C,EAAK0C,QAASf,QAAQ,IAE3C,6BAASO,UAAU,yBACf,wBAAIA,UAAU,eACTlC,EAAK0C,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACd,kBAAC,OAAD,CAAMC,IAAKD,EAAGT,GAAE,WAAaQ,EAAOP,KAApB,KAA+BO,EAAON,UAG9D,yBAAKJ,UAAU,uBACX,0BAAMA,UAAU,mBAAmBa,SAAU/C,EAAKgD,cAC7ChD,EAAKiD,oBADV,KAGA,0BAAMf,UAAU,uBAAsB,0BAAMA,UAAU,QAAhB,KAAtC,IAA4E1B,QAOhG,4BAAQ0B,UAAU,mBACd,kBAAC,IAAD,CAAUgB,WAAW,uBAAuBC,SAAUvC,EAAiBwC,OAAQ1C,EAASsB,MAAOhC,EAAKgC,SAGxG,6BAASE,UAAU,qBACf,yBAAKA,UAAU,qCACXmB,wBAAyB,CAAEC,OAAQhC,GAAmBtB,EAAKwB,iBA8CxF,IAAM+B,EAAS","file":"component---node-modules-gatsby-theme-try-ghost-src-templates-post-js-6aa23d03f6b2bac73eac.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport { readingTime as readingTimeHelper } from '@tryghost/helpers'\nimport { Layout, HeaderPost, AuthorList, PreviewPosts, ImgSharp } from '../components/common'\nimport { StickyNavContainer } from '../components/common/effects'\nimport { MetaData } from '../components/common/meta'\n\nimport { PostClass } from '../components/common/helpers'\n\n/**\n* Single post view (/:slug)\n*\n* This file renders a single post and loads all the content.\n*\n*/\nconst Post = ({ data, location, pageContext }) => {\n    const post = data.post\n    const prevPost = data.prev\n    const nextPost = data.next\n    const previewPosts = data.allGhostPost.edges\n    const readingTime = readingTimeHelper(post)\n    const featImg = post.feature_image\n    const fluidFeatureImg = post.featureImageSharp && post.featureImageSharp.childImageSharp && post.featureImageSharp.childImageSharp.fluid\n    const postClass = PostClass({ tags: post.tags, isFeatured: featImg, isImage: featImg && true })\n\n    const primaryTagCount = pageContext.primaryTagCount\n    const transformedHtml = post.children[0] && post.children[0].html\n\n    return (\n        <>\n            <MetaData data={data} location={location} type=\"article\"/>\n            <Helmet>\n                <style type=\"text/css\">{`${post.codeinjection_styles}`}</style>\n            </Helmet>\n            <StickyNavContainer isPost={true} activeClass=\"nav-post-title-active\" render={ sticky => (\n                <Layout isPost={true} sticky={sticky}\n                    header={<HeaderPost sticky={sticky} title={post.title} />}\n                    previewPosts={<PreviewPosts posts={previewPosts} primaryTagCount={primaryTagCount} prev={prevPost} next={nextPost} />}>\n                    <div className=\"inner\">\n                        <article className={`post-full ${postClass}`}>\n                            <header className=\"post-full-header\">\n                                { post.primary_tag &&\n                                    <section className=\"post-full-tags\">\n                                        <Link to={`/tag/${post.primary_tag.slug}/`}>{post.primary_tag.name}</Link>\n                                    </section>\n                                }\n\n                                <h1 ref={sticky && sticky.anchorRef} className=\"post-full-title\">{post.title}</h1>\n\n                                { post.custom_excerpt &&\n                                    <p className=\"post-full-custom-excerpt\">{post.custom_excerpt}</p>\n                                }\n\n                                <div className=\"post-full-byline\">\n                                    <section className=\"post-full-byline-content\">\n                                        <AuthorList authors={post.authors} isPost={true} />\n\n                                        <section className=\"post-full-byline-meta\">\n                                            <h4 className=\"author-name\">\n                                                {post.authors.map((author, i) => (\n                                                    <Link key={i} to={`/author/${author.slug}/`} >{author.name}</Link>\n                                                ))}\n                                            </h4>\n                                            <div className=\"byline-meta-content\">\n                                                <time className=\"byline-meta-date\" dateTime={post.published_at}>\n                                                    {post.published_at_pretty}&nbsp;\n                                                </time>\n                                                <span className=\"byline-reading-time\"><span className=\"bull\">&bull;</span> {readingTime}</span>\n                                            </div>\n                                        </section>\n                                    </section>\n                                </div>\n                            </header>\n\n                            <figure className=\"post-full-image\">\n                                <ImgSharp fluidClass=\"kg-card kg-code-card\" fluidImg={fluidFeatureImg} srcImg={featImg} title={post.title} />\n                            </figure>\n\n                            <section className=\"post-full-content\">\n                                <div className=\"post-content load-external-scripts\"\n                                    dangerouslySetInnerHTML={{ __html: transformedHtml || post.html }}/>\n                            </section>\n                        </article>\n                    </div>\n                </Layout>\n            )}/>\n        </>\n    )\n}\n\nPost.propTypes = {\n    data: PropTypes.shape({\n        post: PropTypes.shape({\n            codeinjection_styles: PropTypes.string,\n            title: PropTypes.string.isRequired,\n            html: PropTypes.string.isRequired,\n            custom_excerpt: PropTypes.string,\n            feature_image: PropTypes.string,\n            featured: PropTypes.bool,\n            tags: PropTypes.arrayOf(\n                PropTypes.object.isRequired,\n            ),\n            authors: PropTypes.arrayOf(\n                PropTypes.object.isRequired,\n            ).isRequired,\n            primary_tag: PropTypes.shape({\n                name: PropTypes.string,\n                slug: PropTypes.string,\n            }),\n            published_at: PropTypes.string.isRequired,\n            published_at_pretty: PropTypes.string.isRequired,\n            children: PropTypes.arrayOf(\n                PropTypes.object,\n            ),\n            featureImageSharp: PropTypes.object,\n        }).isRequired,\n        prev: PropTypes.object,\n        next: PropTypes.object,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n    pageContext: PropTypes.object,\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n    query($slug: String!, $prev: String!, $next: String!, $tag: String!, $limit: Int!, $skip: Int!) {\n        post: ghostPost(slug: { eq: $slug }) {\n            ...GhostPostFields\n        }\n        prev: ghostPost(slug: { eq: $prev }) {\n            ...GhostPostFields\n        }\n        next: ghostPost(slug: { eq: $next }) {\n            ...GhostPostFields\n        }\n        allGhostPost(\n            sort: { order: DESC, fields: [published_at] },\n            filter: {slug: { ne: $slug },tags: {elemMatch: {slug: {eq: $tag}}}},\n            limit: $limit,\n            skip: $skip\n        ) {\n            edges {\n                node {\n                ...GhostPostFields\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}